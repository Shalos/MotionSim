function [ system ] = PreProcess2D( xls, filename )
%Preprocessor to process 2D Dynamic and kinematic simulations
%from the 2D Excel Sheet.

%begin processing excel sheet import, decide simulation type
%and obtain solver and post functions
templates = [];
spatial = 0;
dynamic = xls.data.INFO(1,1);
if dynamic == 1
    disp('----GENERIC 2D DYNAMIC ANALYSIS SELECTED -----');
    fprintf('%s', 'Processing Data:  ');
    
  solver = @ode45;
  solverfunc = @CalcDyn2D;
    post = 'placeholder';
elseif dynamic == 0
    disp('----GENERIC 2D KINEMATIC ANALYSIS SELECTED -----');
    fprintf('%s', 'Processing Data:  ');
    solver = @NewtonRaphson;
    solverfunc = @CalcKin2D;
    post = 'placeholder';
else
    disp('----WARNING UNKOWN ANALYSIS TYPE SELECTED -----');
end

endtime = 10;
starttime = 0;
timestep = .01;
NRiter = 20;
reltol =1e-3;
abstol =1e-6;
maxstep = -1;
minstep =-1;
initstep = -1;

%process the info sheet of the excel file- all simulation solver data
data = xls.data.INFO;
%process overall simulation information
if dynamic
    endtime                = data(6,7);
    timestep            = data(7,7); 
    abstol            = data(8,7);
    enablestabilization = data(9,7);
    solvertype = 'variable';
else
    endtime     = data(6,2);
    timestep = data(7,2);
    NRiter   = data(8,2);
    reltol = data(9,2);
    solvertype = 'root';
end
%set the pre-configured units that will be used later
unittype = data(2,1);
if unittype == 1
    units = struct('time', 's',...
        'length', 'in',...
        'angle','Deg',...
        'force','lb',...
        'G',386);
elseif unittype == 2
    units = struct('time', 's',...
        'length', 'Ft',...
        'angle','Deg',...
        'force','lb',...
        'G', 32.174);
    

elseif unittype == 3
    units = struct('time', 's',...
        'length', 'm',...
        'angle','Deg',...
        'force','N',...
        'G',9.81);
    
end

%
%Process body information and its initial parameters
%bodies stores the count, body is struct storing all the intitial
%parameters, all body information located in sheet 1 of excel.

%set the ground body as body 1, no 0 allowed in indexes
data = xls.data.BODIES;
body(1) = struct(...
    'R', [0;0],...
    'PHIZ', 0 ,...
    'Rd', [0;0],...
    'w', 0,...
    'Rdd', [0;0],...
    'wd', [0], ...
    'M', 1,...
    'label','Ground',...
    'enabled', 1,...
    'num', 0,...
    'I', 1,...
    'Force', [0;0],...
    'Torque',  0);
templates.body = body(1);
%begin processing all other bodies with the + 1 shift due to ground body
%being 1.
bodies = 1;
for x = 1:size(data,1)
    if data(x,1) > 0
        bodies = bodies+1;
        body(bodies) = struct(...
            'R', data(x, 2:3)',...
            'PHIZ', data(x,4)*pi/180 ,...
            'Rd', data(x, 5:6)',...
            'w', data(x, 7)',...
            'Rdd', [0;0],...
            'wd', [0], ...
            'M', data(x, 8),...
            'label','BDY',...
            'enabled', 1,...
            'num',bodies - 1,...
            'I', data(x, 9),...
            'Force', data(x, 10:11)',...
            'Torque',  data(x, 12));
    end
end
fprintf('%s', [' BODIES:  ' num2str(bodies)]);

%proces the constraint sheet
data = xls.data.CONSTRAINTS;
%First check for any constraints are currently listed
    templates.joint = struct(...
                'label','CNST',...
                'num',0,...
                'Type', 1,...
                'Bodyi',1,...
                'Bodyj', 1,...
                'pi', [0;0],...
                'qi', [0;0],...
                'pj',[0;0],...
                'qj',[0;0],...
                'L',0);


joints = 0;
for x = 1:30
    if data(x,1) > 0
        joints = joints+1;
    end
end
%Finally process the joints into solver format if exist. if no joints exist
%create a dummy variable to avoid errors in packaging later.
if joints == 0
    joint = [];

else
    joints = 0;
    for x = 1:30
        if data(x,1) > 0
            joints = joints + 1;
            joint(joints) = struct(...
                'label','CNST',...
                'num',joints - 1,...
                'Type', data(x,1),...
                'Bodyi', data(x,2)+1,...
                'Bodyj', data(x,3)+1,...
                'pi', data(x, 4:5)',...
                'qi', data(x, 6:7)',...
                'pj',data(x, 8:9)',...
                'qj',data(x, 10:11)',...
                'L', data(x,12));

        end
    end
end
alpha = data(1, 13);
beta = data(1, 14);
fprintf('%s', [' CONSTRAINTS:  ' num2str(joints)]);

%Driving Constraints sheet, will need txt data due to eval used
%in the simulations

data = xls.data.DRIVINGCONST;
txtdata = xls.textdata.DRIVINGCONST;
%check/count driving constraints
numdriver = 0;
for x = 1:30
    if data(x,1)>0
        numdriver = numdriver+1;
    end
end
if numdriver == 0;
    drivers = [];
else
    index = 0;
    for x = 1:30
        if data(x,1)>0
            index = index+1;
            %process f(t), check for txt or number and save
            if isnan(data(x,3))
                ft = txtdata(x+2,3);
            else
                ft = num2str(data(x,3));
            end
            %process fd(t), check for txt or number and save
            if isnan(data(x,4))
                fdt = txtdata(x+2,4);
            else
                fdt = num2str(data(x,4));
            end
            %process fdd(t), check for txt or number and save
            if isnan(data(x,5))
                fddt = txtdata(x+2,5);
            else
                fddt = num2str(data(x,5));
            end
            coord = txtdata(x+2,2)';          
            
            drivers(index) = struct('body', data(x,1)+1,...
                'label','driver',...
                'num', index,...
                'coord', coord,...
                'ft', ft,...
                'fdt', fdt,...
                'fddt',fddt);
        end
    end
end
templates.driver = struct('body',1,...
                'label','driver',...
                'num', 0,...
                'coord', 'X',...
                'ft', 0,...
                'fdt', 0,...
                'fddt',0);
fprintf('%s', [' DRIVER:  ' num2str(numdriver)]);

%Process the Spring/Damper/Actuator sheet (SDA)
data = xls.data.SDA;

%check for springs or dampers
springdampers = 0;
for x = 1:12
    if data(x,1)==1
        springdampers = springdampers+1;
    end
end

%Process the information, if there are no spring dampers create a dummy
%variable
if springdampers == 0
    springdamp = [];
else
    springdampers =0;
    for x = 1:12
        if data(x,1)==1
            springdampers = springdampers+1;
            springdamp(springdampers) = struct(...
                'Bodyi', data(x,2) + 1,...
                'Bodyj', data(x,3) + 1,...
                'pi', data(x, 4:5)',...
                'pj', data(x,6:7)',...
                'initL', data(x,8)',...
                'k', data(x,9)',...
                'c', data(x,10)',...
                'num',x-1 ,...
                'label',' SDA' ,....
                'enable',1,...
                'f', data(x,11)');
        end
    end
end
templates.SDA = struct(...
                'Bodyi', 1,...
                'Bodyj', 1,...
                'pi', [0;0],...
                'pj', [0;0],...
                'initL', 0,...
                'k', 0,...
                'c',0,...
                'num',0 ,...
                'label',' SDA' ,....
                'enable',1,...
                'f', 0);
fprintf('%s', [' SDA:  ' num2str(springdampers)]);

%begin searching the post processsing option, for graph etc.
data = xls.data.POST;
txtdata = xls.textdata.POST;
numpts = 0;
for x = 1:12
    if data(x,1)==1
        numpts = numpts+1;
    end
end
axissize = txtdata(2,6);
bodysize = data(2,10);
%Process the information, if there are no spring dampers create a dummy
%variable
if numpts == 0
    numpts = 0;
    points = [];
else
    numpts =0;
    for x = 1:12
        if data(x,1) > 0
            numpts = numpts+1;
            points(numpts) = struct(...
                'num', data(x,1)',...
                'label', 'pnt',...
                'body', data(x,2)+1,...
                'vect', data(x, 3:4)');

        end
    end
end

templates.points = struct(...
                'num', 0,...
                'label', 'pnt',...
                'body', 1,...
                'vect', [0;0]);

%Organize the general info of the system into a info structure, noting 
%the differences between dynamic and kinematic.
if dynamic
    info = struct(...
        'name', filename(1:length(filename)-5),...
        'bodies', bodies,...
        'joints', joints,...
        'stabilize',  enablestabilization,...
        'numSDA', springdampers,...
        'drivers', numdriver,...
        'dynamic', dynamic,...
        'templates',templates,...
        'units', units,...
        'alpha', alpha,...
        'beta', beta,...
        'numpts', numpts,...
        'axissize', axissize,...
        'simulink',0,...
        'spatial', spatial,...
        'bodysize',bodysize );
else
    info = struct(...
        'name', filename(1:length(filename)-5),...
        'bodies', bodies,...
        'joints', joints,...
        'drivers', numdriver,...
        'stabilize',0,...
        'templates',templates,...
        'numSDA', 0,...
        'dynamic', dynamic,...
        'alpha', 0,...
        'beta', 0,...
        'units', units,...
        'numpts', numpts,...
        'axissize', axissize,...
        'simulink',0,...
        'spatial', spatial,...
        'bodysize',bodysize);
end

solver = struct(...
        'type', solvertype,...
        'solver', solver,...
        'solverfunc', solverfunc,...
        'endtime', endtime,...
        'starttime', starttime,...
        'step', timestep,...
        'NRiter', NRiter,...
        'reltol', reltol,...
        'abstol', abstol,...
        'maxstep', maxstep,...
        'minstep', minstep,...
        'initstep', initstep);

%Construct System variables and package into "system" structure. This will
%be packaged the very same way the solver will solve the system, using the
%system variable. Packaged into a single variable, the entire system
%information can be passed from one function to another.
if dynamic
    system = struct(...
        'info', info,...
        'body', body,...
        'joint', joint,...
        'SDA', springdamp,...
        'eval', 0,...
        'drivers',drivers,...
        'solver', solver,...
        'post',post,...
        'points', points);
else
    system = struct(...
        'info', info,...
        'body', body,...
        'joint', joint,...
        'eval', 0,...
        'SDA', springdamp,...
        'drivers',drivers,...
        'solver', solver,...
        'post',post,...
        'points', points);
end

%Display info to screen
disp(' ');
disp('-File Processed-');

end

