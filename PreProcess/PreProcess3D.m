function [ sysmodel ] = PreProcess3D( xls, filename )
%Preprocessor to process 3D Dynamic\kinematic simulations
%from the 3D Excel Sheet. The excel sheet is already imported into the xls
%variable, with filename as the name of the file for reference later on.
%All data from the excel sheet is put into a single structure variable that
%the solvers use to process the system

% Process the information sheet from excel file
dynamic = xls.data.INFO(1,1);
data = xls.data.INFO;
spatial = 1;
templates = [];
%checking for a kinematic or dynamic simulation, and set the appropriate
%solver and post processor.
if dynamic == 1
    disp('----GENERIC 3D DYNAMIC ANALYSIS SELECTED -----');
    fprintf('%s', 'Processing Data:  ');
  %  solver = eval(['@', cell2mat(xls.textdata.INFO(24,3))]);
  solver = @ode45;
  solverfunc = @CalcDyn3D;
    post = 'placeholder';
elseif dynamic == 0
    disp('----GENERIC 3D KINEMATIC ANALYSIS SELECTED -----');
    fprintf('%s', 'Processing Data:  ');
   % solver = eval(['@', cell2mat(xls.textdata.INFO(27,3))]);
    solver = @NewtonRaphson;
    solverfunc = @CalcKin3D;
    post = 'placeholder';
else
    disp('----WARNING UNKOWN ANALYSIS TYPE SELECTED -----');
end

endtime = 10;
starttime = 0;
timestep = .01;
NRiter = 20;
reltol =1e-3;
abstol =1e-6;
maxstep = -1;
minstep =-1;
initstep = -1;


%process overall simulation information, and pick up the needed variables
%for dynamic or kinematic sims.
if dynamic
    endtime                = data(6,7);
    timestep            = data(7,7); 
    abstol            = data(8,7);
    enablestabilization = data(9,7);
    solvertype = 'variable';
else
    endtime     = data(6,2);
    timestep = data(7,2);
    NRiter   = data(8,2);
    reltol = data(9,2);
    solvertype = 'root';
end

%Process the preconfigured units for post processor analysis
unittype = data(2,1);
if unittype == 1
    units = struct('time', 's',...
        'length', 'in',...
        'angle','Deg',...
        'force','lb',...
        'G',386);
elseif unittype == 2
    units = struct('time', 's',...
        'length', 'Ft',...
        'angle','Deg',...
        'force','lb',...
        'G', 32.174);
    

elseif unittype == 3
    units = struct('time', 's',...
        'length', 'm',...
        'angle','Deg',...
        'force','N',...
        'G',9.81);
    
end

%Process body information and its initial parameters
%bodies stores the count, body is struct storing all the intitial
%parameters, all body information located in sheet 1 of excel.
data = xls.data.BODIES;
body(1) = struct(...
            'R', [0;0;0],...
            'P', [1;0;0;0] ,...
            'Rd', [0;0;0],...
            'w', [0;0;0],...
            'Rdd', [0;0;0],...
            'wd', [0;0;0], ...
            'M', 1,...
            'label','Ground',...
            'num', 0,...
            'I', [1;1;1],...
            'Force', [0;0;0],...
            'enabled', 1,...
            'Torque',  [0;0;0]);

bodies = 1;
templates.body = body(1);

for x = 1:30
    if data(x,1) > 0
        bodies = bodies+1;
        %if using Euler parameters import directly and calculate e0,
        %if using angles convert to Euler parameters.
        
        if data(1,8)
            e0 = sqrt( -data(x, 5)^2 - data(x, 6)^2 - data(x, 7)^2 +1);
            p = [e0;data(x, 5:7)'];
        else
            p = Amat_angles( data(x, 5)*pi/180,data(x, 6)*pi/180,data(x, 7)*pi/180);
            p = Amat_Euler(p);
        end
        
        body(bodies) = struct(...
            'R', data(x, 2:4)',...
            'P', p ,...
            'Rd', data(x, 8:10)',...
            'w', data(x, 11:13)',...
            'Rdd', [0;0;0],...
            'wd', [0;0;0], ...
            'M', data(x, 14),...
            'label','BDY',...
            'num',bodies - 1,...
            'I', data(x, 15:17)',...
            'Force', data(x, 18:20)',...
            'enabled', 1,...
            'Torque',  data(x, 21:23)');
    end
end
fprintf('%s', [' BODIES:  ' num2str(bodies)]);

%process the constraint sheet in the excel file
data = xls.data.CONSTRAINTS;
 templates.joint = struct(...,
                'label','CNST',...
                'num',0,...
                'Type', 1,...
                'Bodyi',1,...
                'Bodyj', 1,...
                'pi',[0;0;0],...
                'qi', [0;0;0],...
                'pj',[0;0;0],...
                'qj',[0;0;0],...
                'L', 0);
%First check for any constraints are currently listed
joints = 0;
for x = 1:30
    if data(x,1) > 0
        joints = joints+1;
    end
end
%Finally process the joints into solver format if exist. if no joints exist
%create a dummy variable to avoid errors in packaging later.
if joints == 0
    joint = [];
else
    joints = 0;
    for x = 1:30
        if data(x,1) > 0
            joints = joints + 1;
            joint(joints) = struct(...,
                'label','CNST',...
                'num',joints - 1,...
                'Type', data(x,1)',...
                'Bodyi', data(x,2)+1,...
                'Bodyj', data(x,3)+1,...
                'pi', data(x, 4:6)',...
                'qi', data(x, 7:9)',...
                'pj',data(x, 10:12)',...
                'qj',data(x, 13:15)',...
                'L', data(x,16));
        end
    end
end

alpha = data(1, 17);
beta = data(1, 18);


fprintf('%s', [' CONSTRAINTS:  ' num2str(joints)]);

%process the driving/simple constraint sheet
data = xls.data.DRIVINGCONST;
txtdata = xls.textdata.DRIVINGCONST;
%check/count driving constraints
numdriver = 0;
for x = 1:30
    if data(x,1)>0
        numdriver = numdriver+1;
    end
end
if numdriver == 0;
    drivers = [];
else
    index = 0;
    for x = 1:30
        if data(x,1)>0
            index = index+1;
            %process f(t), check for text or numerical input
            if isnan(data(x,3))
                ft = txtdata(x-1,3);
            else
                ft = num2str(data(x,3));
            end
            %process fd(t), check for text or numerical input
            if isnan(data(x,4))
                fdt = txtdata(x-1,4);
            else
                fdt = num2str(data(x,4));
            end
            %process fdd(t), check for text or numerical input
            if isnan(data(x,5))
                fddt = txtdata(x-1,5);
            else
                fddt = num2str(data(x,5));
            end
            coord = txtdata(x-1,2)';
            
            drivers(index) = struct('body', data(x,1)+1,...
                'label','driver',...
                'num', index,...
                'coord', coord,...
                'ft', ft,...
                'fdt', fdt,...
                'fddt',fddt);
        end
    end
end
templates.driver = struct('body', 1,...
                'label','driver',...
                'num', 0,...
                'coord', 'X',...
                'ft', 0,...
                'fdt', 0,...
                'fddt',0);

fprintf('%s', [' DRIVER:  ' num2str(numdriver)]);

%Process the Spring/Damper/Actuator sheet.
data = xls.data.SDA;

%check for any elements exist
springdampers = 0;
for x = 1:12
    if data(x,1)==1
        springdampers = springdampers+1;
    end
end

%Process the information, if there are no spring dampers create a dummy
%variable
if springdampers == 0
    springdamp = [];
else
    springdampers =0;
    for x = 1:12
        if data(x,1)==1
            springdampers = springdampers+1;
            springdamp(springdampers) = struct(...
                'Bodyi', data(x,2)+1,...
                'Bodyj', data(x,3)+1,...
                'pi', data(x, 4:6)',...
                'pj', data(x,7:9)',...
                'initL', data(x,10)',...
                'k', data(x,11)',...
                'c', data(x,12)',...
                'num',x ,...
                'label','SDA' ,...
                'enable',0,...
                'f', data(x,13)');
        end
    end
end

templates.SDA =struct(...
                'Bodyi', 1,...
                'Bodyj', 1,...
                'pi', [0;0;0],...
                'pj', [0;0;0],...
                'initL',0,...
                'k', 0,...
                'c', 0,...
                'num',0 ,...
                'label','SDA' ,...
                'enable',0,...
                'f', 0);
fprintf('%s', [' SDA:  ' num2str(springdampers)]);

%Process the post
data = xls.data.POST;
txtdata = xls.textdata.POST;
numpts = 0;
for x = 1:12
    if data(x,1)==1
        numpts = numpts+1;
    end
end
axissize = txtdata(2,6);
bodysize = data(2,10);
%Process the information, if there are no spring dampers create a dummy
%variable
if numpts == 0
    numpts = 0;
    points = [];
else
    numpts =0;
    for x = 1:12
        if data(x,1) > 0
            numpts = numpts+1;
            points(numpts) = struct(...
                'num', data(x,1)',...
                'label', 'pnt',...
                'body', data(x,2)+1,...
                'vect', data(x, 3:5)');

        end
    end
end
templates.points = struct(...
                'num',0,...
                'label', 'pnt',...
                'body', 1,...
                'vect', [0;0;0]);
%Organize system general information, will be used in solver
if dynamic
    info = struct(...
        'name', filename(1:length(filename)-5),...
        'bodies', bodies,...
        'joints', joints,...
        'stabilize',  enablestabilization,...
        'numSDA', springdampers,...
        'drivers', numdriver,...
        'units', units,...
        'numpts', numpts,...
        'alpha', alpha,...
        'beta', beta,...
        'dynamic', dynamic,...
        'axissize', axissize,...
        'templates',templates,...
        'spatial', spatial,...
        'simulink',0,...
        'bodysize',bodysize);
else
    info = struct(...
        'name', filename(1:length(filename)-5),...
        'bodies', bodies,...
        'joints', joints,...
        'drivers', numdriver,...
        'templates',templates,...
        'numSDA', 0,...
        'units', units,...
        'numpts', numpts,...
        'dynamic', dynamic,...
        'axissize', axissize,...
        'stabilize',0,...
        'simulink',0,...
        'spatial', spatial,...
        'bodysize',bodysize);
end

 solver = struct(...
        'type', solvertype,...
        'solver', solver,...
        'solverfunc', solverfunc,...
        'endtime', endtime,...
        'starttime', starttime,...
        'step', timestep,...
        'NRiter', NRiter,...
        'reltol', reltol,...
        'abstol', abstol,...
        'maxstep', maxstep,...
        'minstep', minstep,...
        'initstep', initstep);
        
%Construct System variables and package into "system" structure. This will
%be packaged the very same way the solver will solve the system, using the
%system variable. Packaged into a single variable, the entire system
%information can be passed from one function to another.

if dynamic
    sysmodel = struct(...
        'info', info,...
        'body', body,...
        'joint', joint,...
        'SDA', springdamp,...
        'eval', 0,...
        'drivers',drivers,...
        'solver', solver,...
        'post',post,...
        'points', points);
else
    sysmodel = struct(...
        'info', info,...
        'body', body,...
        'joint', joint,...
        'eval', 0,...
        'drivers',drivers,...
        'solver', solver,...
        'post',post,...
        'points', points);
end
load('annvar.mat','net')
sysmodel.ANN = net;
%Display info to screen
disp(' ');
disp('-File Processed-');

end

